import InvoiceDetail from "@/components/Invoices/InvoiceDetail";
import Invoices from "@/models/Invoices";
import { GetStaticProps, InferGetStaticPropsType, GetStaticPaths, GetStaticPropsContext, GetStaticPropsResult } from "next";
import { useRouter } from "next/router";
import { MongoClient } from "mongodb";
import { useAppSelector } from "@/Hooks/hooks";
import Head from "next/head";

const API_URL = process.env.API_URL || "http://localhost:3000"; 

const DetailPage = ({
  invoices,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
    

  const darkMode = useAppSelector((state) => state.ui.isDarkMode);

  return (
    <>
      <Head>
        <title>Invoice app</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        {darkMode ? (
          <style>{"body { background-color: #141625; }"}</style>
        ) : (
          <style>{"body { background-color: #f8f8f8; }"}</style>
        )}
      </Head>

      <main><InvoiceDetail
        key={invoices.id}
        id={invoices.id}
        status={invoices.status}
        senderAddress={invoices.senderAddress}
        createdAt={invoices.createdAt}
        clientName={invoices.clientName}
        clientEmail={invoices.clientEmail}
        clientAddress={invoices.clientAddress}
        paymentDue={invoices.paymentDue}
        item={invoices.items}
        price={invoices.total}
        description={invoices.description}
      /></main>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const client = await MongoClient.connect(
    process.env.MONGO_URL
  );
  const db = client.db();

  const invoiceCollection = db.collection("invoices");

  const result = await invoiceCollection.find().toArray();

  const paths = result.map((i) => ({
    params: { invoiceId: i.id },
  }));

  return { paths, fallback: 'blocking' };
};

export const getStaticProps: GetStaticProps<{
  invoices: Invoices;
}> = async (context:GetStaticPropsContext): Promise<GetStaticPropsResult<{ invoices: any }>> => {
 
  if (typeof context.params !== "undefined"){
  const invoiceId = context.params.invoiceId
  
  const client = await MongoClient.connect(
    process.env.MONGO_URL
  );
  const db = client.db();
  const invoice = await db.collection("invoices").findOne({ id: invoiceId });

  client.close()
  
  
  return {
    props: {
      invoices: {
        ...invoice,
      _id: invoice?._id.toString(),
      }
    },
    revalidate: 1,
  };
  }
  return {
    props: {
      invoices:{} as Invoices
    },
    revalidate: 1,
  }

};
export default DetailPage;
