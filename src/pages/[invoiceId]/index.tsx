import InvoiceDetail from "@/components/Invoices/InvoiceDetail";
import Invoices from "@/models/Invoices";
import { GetStaticProps, InferGetStaticPropsType, GetStaticPaths } from "next";
import { useRouter } from "next/router";
import { MongoClient } from "mongodb";
import { useAppSelector } from "@/Hooks/hooks";
import Head from "next/head";
const DetailPage = ({
  invoices,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const router = useRouter();

  const invoiceDetails = invoices
    .filter((f) => f.id === router.query.invoiceId)
    .map((invoice) => (
      <InvoiceDetail
        key={invoice.id}
        id={invoice.id}
        status={invoice.status}
        senderAddress={invoice.senderAddress}
        createdAt={invoice.createdAt}
        clientName={invoice.clientName}
        clientEmail={invoice.clientEmail}
        clientAddress={invoice.clientAddress}
        paymentDue={invoice.paymentDue}
        item={invoice.items}
        price={invoice.total}
        description={invoice.description}
      />
    ));

  const darkMode = useAppSelector((state) => state.ui.isDarkMode);

  return (
    <>
      <Head>
        <title>Invoice app</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        {darkMode ? (
          <style>{"body { background-color: #141625; }"}</style>
        ) : (
          <style>{"body { background-color: #f8f8f8; }"}</style>
        )}
      </Head>

      <main>{invoiceDetails}</main>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const client = await MongoClient.connect(
    "mongodb+srv://szau90:FordMondeo12@cluster0.jfdopa9.mongodb.net/invoices?retryWrites=true&w=majority"
  );
  const db = client.db();

  const invoiceCollection = db.collection("invoices");

  const result = await invoiceCollection.find().toArray();

  const paths = result.map((i) => ({
    params: { invoiceId: i.id },
  }));

  return { paths, fallback: false };
};

export const getStaticProps: GetStaticProps<{
  invoices: Invoices[];
}> = async () => {
  const client = await MongoClient.connect(
    "mongodb+srv://szau90:FordMondeo12@cluster0.jfdopa9.mongodb.net/invoices?retryWrites=true&w=majority"
  );
  const db = client.db();

  const invoiceCollection = db.collection("invoices");

  const result = await invoiceCollection.find().toArray();

  return {
    props: {
      invoices: result.map((i) => ({
        clientAddress: i.clientAddress,
        clientEmail: i.clientEmail,
        clientName: i.clientName,
        createdAt: i.createdAt,
        description: i.description,
        id: i.id,
        items: i.items,
        paymentTerms: i.paymentTerms,
        senderAddress: i.senderAddress,
        status: i.status,
        paymentDue: i.paymentDue,
        total: i.total,
      })),
    },
    revalidate: 1,
  };
};
export default DetailPage;
