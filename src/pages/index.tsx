import Head from "next/head";
import { MongoClient } from "mongodb";
import InvoiceList from "@/components/Invoices/InvoiceList";
import { GetStaticProps, InferGetStaticPropsType } from "next";
import Invoices from "@/models/Invoices";
import styles from "@/styles/Home.module.css";
import Header from "@/components/Header";
import SideBar from "@/components/Ui/SideBar";
import { useAppSelector } from "@/Hooks/hooks";
import CheckboxModal from "@/components/Ui/CheckboxModal";
import ReactHookFrom from "@/components/Form/ReactHookFrom";
import { useEffect, useState } from "react";
import NoInvoice from "@/components/Ui/NoInvoice";




const Home = ({ invoices }: InferGetStaticPropsType<typeof getStaticProps>) => {
  const showModal = useAppSelector((state) => state.ui.showFormModal);
  const showFilter = useAppSelector((state) => state.ui.showCheckboxModal);
  const filter = useAppSelector((state) => state.ui.filter);

  const darkMode = useAppSelector((state) => state.ui.isDarkMode);

  const classHandler = darkMode ? styles.dark : styles.main;

  const filterPaid = filter === "paid";
  const filterDraft = filter === "draft";
  const filterPending = filter === "pending";

  const isEmpty = invoices.length === 0;
  const all = invoices.length;
  const paid = invoices.filter((f) => f.status === "paid").length;
  const pending = invoices.filter((f) => f.status === "pending").length;
  const draft = invoices.filter((f) => f.status === "draft").length;

  const [isDraft, setIsDraft] = useState(true);
  const [isPaid, setIsPaid] = useState(true);
  const [isPending, setIsPending] = useState(true);

  useEffect(() => {
    if (draft === 0) {
      setIsDraft(false);
    }
    if (paid === 0) {
      setIsPaid(false);
    }
    if (pending === 0) {
      setIsPending(false);
    }
  }, [draft, paid, pending, setIsDraft, setIsPending, setIsPaid]);

  const propsHandler = filterPaid
    ? paid
    : filterPending
    ? pending
    : filterDraft
    ? draft
    : all;

  const allInvoice =
    filter === "all" &&
    invoices.map((invoice) => (
      <InvoiceList
        key={invoice.id}
        id={invoice.id}
        clientName={invoice.clientName}
        price={invoice.total}
        status={invoice.status}
        createdAt={invoice.createdAt}
      />
    ));

  const pendingInvoice =
    filterPending &&
    invoices
      .filter((f) => f.status === "pending")
      .map((invoice) => (
        <InvoiceList
          key={invoice.id}
          id={invoice.id}
          clientName={invoice.clientName}
          price={invoice.total}
          status={invoice.status}
          createdAt={invoice.createdAt}
        />
      ));
  const paidInvoice =
    filterPaid &&
    invoices
      .filter((f) => f.status === "paid")
      .map((invoice) => (
        <InvoiceList
          key={invoice.id}
          id={invoice.id}
          clientName={invoice.clientName}
          price={invoice.total}
          status={invoice.status}
          createdAt={invoice.createdAt}
        />
      ));
  const draftInvoice =
    filterDraft &&
    invoices
      .filter((f) => f.status === "draft")
      .map((invoice) => (
        <InvoiceList
          key={invoice.id}
          id={invoice.id}
          clientName={invoice.clientName}
          price={invoice.total}
          status={invoice.status}
          createdAt={invoice.createdAt}
        />
      ));

    

  return (
    <>
      <Head>
        <title>Invoice app</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        {darkMode && <style>{"body { background-color: #141625; }"}</style>}
      </Head>
      <main className={classHandler}>
        <Header invoiceLeft={propsHandler} />
        <SideBar />
        {showModal && <ReactHookFrom />}
        {showFilter && <CheckboxModal />}

        {!isEmpty && allInvoice}
        {!isEmpty && pendingInvoice}
        {!isEmpty && paidInvoice}
        {!isEmpty && draftInvoice}
        {!isEmpty && !isPaid && filterPaid && <NoInvoice />}
        {!isEmpty && !isDraft && filterDraft && <NoInvoice />}
        {!isEmpty && !isPending && filterPending && <NoInvoice />}
        {isEmpty && <NoInvoice />}
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps<{
  invoices: Invoices[];
}> = async () => {
  const client = await MongoClient.connect(
   process.env.MONGO_URL
  );
  const db = client.db();

  const invoiceCollection = db.collection("invoices");

  const result = await invoiceCollection.find().toArray();

  return {
    props: {
      invoices: result.map((i) => ({
        clientAddress: i.clientAddress,
        clientEmail: i.clientEmail,
        clientName: i.clientName,
        createdAt: i.createdAt,
        description: i.description,
        id: i.id,
        items: i.items,
        paymentTerms: i.paymentTerms,
        senderAddress: i.senderAddress,
        status: i.status,
        paymentDue: i.paymentDue,
        total: i.total,
        _id:i._id.toString(),
      })),
    },
    revalidate: 1,
  };
};

export default Home;
